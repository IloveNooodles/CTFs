import java.awt.Color;
import java.io.InputStream;
import javax.imageio.ImageIO;
import java.io.ByteArrayInputStream;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;

// 
// Decompiled by Procyon v0.5.36
// 

class Cactus
{
    public double x;
    public int y;
    public int width;
    public int height;
    public Rectangle hitbox;
    public int offset;
    public boolean bird;
    double rng;
    byte[] ll1;
    byte[] ll2;
    byte[] ll3;
    byte[] bb1;
    byte[] bb2;
    byte[] bb3;
    BufferedImage image;
    BufferedImage l1;
    BufferedImage l2;
    BufferedImage l3;
    BufferedImage b1;
    BufferedImage b2;
    BufferedImage b3;
    
    public Cactus(final int n, final int y) {
        this.offset = 5;
        this.ll1 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 17, 0, 0, 0, 34, 8, 6, 0, 0, 0, -71, -125, 50, -7, 0, 0, 0, -122, 73, 68, 65, 84, 120, 94, -19, -46, -47, 10, -128, 48, 8, 5, -48, -3, -93, -1, -1, 29, 123, 44, 12, 28, -21, -22, -44, 10, -86, 7, 47, -8, -80, -23, 14, 8, 107, 109, -111, -34, -5, 70, 68, -93, -8, -116, 51, 110, 16, -72, 5, -67, -122, -124, 96, -124, 72, -33, -123, 60, 4, 123, 75, 8, 7, -45, 8, -18, -117, 64, -120, -32, -114, 56, 24, 34, -42, 37, -34, 121, -67, 66, 116, -17, 27, -60, -86, -57, -56, 1, 88, 31, 43, -117, 12, -32, 42, 34, -67, 19, 96, 33, 94, -87, -57, 115, -78, -112, -117, 112, 50, 80, -120, 112, -26, -99, 17, 72, 35, -110, 66, 116, 10, -47, -7, 15, -62, -31, 7, 88, 56, 35, -39, 1, 80, -120, -63, 42, 92, 7, -64, -79, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.ll2 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 34, 0, 0, 0, 33, 8, 6, 0, 0, 0, -68, -45, 121, 108, 0, 0, 0, -46, 73, 68, 65, 84, 120, 94, -19, -110, 65, 10, -123, 48, 12, 68, -67, 99, -17, 127, -114, 46, -65, -92, 16, 41, -81, 105, 77, 69, -53, 23, 51, 48, 11, -109, 73, -14, -96, 110, 91, 71, 57, -25, 95, 74, -23, -80, 124, 51, -29, 81, -67, -125, -67, 83, 17, -30, 42, 12, -25, -89, 97, 94, 5, -30, -127, -30, -4, -19, 32, -38, 39, 12, -113, 113, -98, 32, -4, 110, 52, 2, 97, 79, 97, -104, -75, 106, 90, 103, 79, 107, -115, 120, 76, -67, 4, -124, -17, -49, 5, -30, -57, 65, -8, -26, 60, -90, 126, 20, -60, 90, -52, -38, -88, 23, 32, -20, -3, 61, 72, -49, -33, 1, -31, -14, -98, -83, -20, 52, -120, -27, 26, -124, 7, 44, 91, -71, 82, -32, -47, 25, 16, 66, 80, -52, -117, -83, 94, 41, -16, -88, 23, -28, 12, 66, -60, -103, -98, 75, -104, 71, 71, 32, -38, -13, 64, -120, 56, 111, -7, 8, -9, -114, 90, -10, 2, -88, 56, 79, 51, -17, -122, -71, 3, -124, -103, 70, 30, -104, 37, 32, -94, -6, 31, -32, -126, -91, 32, -86, 0, -95, 2, -124, 10, 16, 42, 64, -88, 79, -125, -20, 11, -91, -85, -68, 97, -63, 70, -105, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.ll3 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 51, 0, 0, 0, 33, 8, 6, 0, 0, 0, 116, -65, -109, -70, 0, 0, 1, -110, 73, 68, 65, 84, 120, 94, -19, -113, 65, -86, -60, 48, 12, 67, -25, -114, -67, -1, 57, 102, 57, 31, 23, 60, -104, 87, 69, 113, 74, 7, -2, 34, 2, 47, 34, -55, -78, -14, 122, 13, -16, 126, -65, 63, -57, 113, 124, 39, -34, -12, -52, -16, 68, 70, -96, 102, 80, -101, -126, 37, -18, -108, 121, 34, 35, -64, -3, -27, 15, -35, 45, 82, -11, -69, 25, 4, -9, 127, -14, 25, -106, -54, -99, -28, 59, 25, 10, 44, -53, 125, -22, 83, -52, -118, -52, -118, -57, -101, 28, 51, 20, -86, 79, 113, -44, 82, -81, -17, 11, 92, 17, 106, 93, -82, 106, -68, -105, -88, 62, -59, 57, 45, -71, 11, 92, 17, 106, 93, -82, 106, -11, 78, -67, 91, 125, -118, 115, 90, 114, 39, 120, -124, 1, 89, -124, 90, -105, -85, 90, -67, 81, -17, 86, -97, -30, -100, -106, -36, 37, -40, 21, -95, -42, -27, -100, -106, 119, 43, -105, -35, -72, 63, -46, 78, 66, 5, -109, 115, 90, -105, 115, -38, -2, -116, -14, -85, 96, 114, 78, -21, 114, 78, -37, -97, 81, 126, 21, 76, -50, 105, 93, -50, 105, -5, 51, -54, -81, -126, -55, -71, 81, 126, -59, 57, 77, 125, -58, -51, 79, 62, -109, 37, -24, 119, 25, 74, -53, 28, 22, 28, -115, -14, -98, -124, 10, 38, -89, -90, 22, -96, -33, 101, 40, -83, 102, 5, -72, -45, -103, -37, 69, 120, -100, -2, 78, 6, -71, -102, 87, -63, 125, 53, 95, 51, -125, -35, -116, -114, 50, 67, 21, 118, -38, 40, 55, -64, 125, 14, -3, -105, 50, -93, 113, 71, 87, 50, -24, 117, -71, -36, -113, -95, -25, 2, 30, 80, -29, -114, 6, -70, 25, -12, -71, 92, -18, -57, -48, 35, -111, -121, 120, -84, 115, 52, 49, -38, 117, -29, 114, -23, -115, -95, -57, 98, 84, -56, 29, 37, 70, 25, -100, 89, 38, -3, 49, -12, 88, -116, -118, -52, 14, 87, -116, 50, 86, -13, -72, 19, 67, -113, -59, -88, 72, -25, 120, -62, 101, -28, 112, 71, -127, -5, -1, -18, 51, -12, 58, 112, 127, 127, -122, 1, -85, 69, -98, -56, 8, 112, 127, 127, -122, 1, -85, 69, -98, -56, 8, 112, 127, 127, -122, 1, -85, 69, -98, -56, 8, 112, -33, 125, -26, 15, 88, 93, -46, -72, -55, 22, 107, 117, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.bb1 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 25, 0, 0, 0, 45, 8, 6, 0, 0, 0, 91, 2, -64, -40, 0, 0, 0, -101, 73, 68, 65, 84, 120, 94, -19, -47, -31, 10, -128, 32, 12, 4, -32, -34, -47, -9, 127, 14, 127, 22, -2, 56, -111, -39, -26, 78, 22, 4, -18, 96, 68, 122, -10, 21, 93, -105, 35, -75, -42, -69, -108, 50, 77, 91, -105, -35, -83, 104, 64, 40, -108, 8, -107, 68, -88, -4, 18, 105, -9, -104, 113, -35, 12, -125, -56, -18, 4, 105, 111, 32, 15, -54, 65, 95, -21, -11, -25, -55, -126, -11, 118, 114, 92, -120, -71, 105, 28, -10, -10, 18, -95, 122, -119, 80, -67, 68, -88, -34, 65, 8, 70, -18, 49, 61, 19, -119, 24, 124, -27, 103, 72, 7, -112, 104, 104, 2, -112, 40, 72, 5, -112, 29, 104, -4, -15, 75, 0, -111, -121, 86, -80, -5, -63, 86, 18, -95, -110, 8, -107, 68, -88, -100, -119, 80, 32, -54, -19, -22, 69, -48, 123, -125, 30, -88, 77, -115, -93, 66, 64, -102, -23, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.bb2 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 50, 0, 0, 0, 45, 8, 6, 0, 0, 0, -20, -65, 56, -1, 0, 0, 1, 125, 73, 68, 65, 84, 120, 94, -19, -112, 81, -114, -60, 32, 12, 67, -25, -114, -67, -1, 57, -6, 57, 35, 70, 2, 33, -105, 24, -109, 82, 127, 53, -110, -75, -102, -38, -15, 35, -5, -7, 8, 115, -98, -25, -9, 56, -114, -117, -54, 119, -52, 102, -25, 113, 70, 4, -40, 9, 114, 48, 44, 16, 7, -61, 2, 113, 48, -74, 66, 74, -74, 10, -65, 99, 111, -106, 17, -50, 46, 8, -10, -12, 123, -24, -95, 84, 6, -99, 29, -112, -88, -93, -18, 70, 62, -26, 110, -51, 14, 72, -44, -15, 30, -110, -103, 85, 72, -7, 61, -6, -122, 123, -3, 110, -28, 99, -82, -17, 27, 113, -24, -84, 64, -6, 108, 15, -118, 58, 102, 62, -26, 70, -39, -53, 49, -47, -107, -72, -120, 98, -113, 97, -98, -30, -85, -71, -10, 102, 12, -12, -57, -96, -121, 98, 16, -26, 41, -66, -102, -5, -5, -44, 36, -53, 74, -114, 121, -118, -81, -26, -34, 67, -44, 28, -13, 20, 95, -51, -67, -121, -88, 57, -26, 41, -66, -102, 123, 15, 81, 115, -52, -85, 126, 21, 122, -104, -101, -11, 112, -109, 44, 43, 57, -26, -83, 104, -42, 99, 59, 36, -14, 85, 49, 70, -13, -87, 73, -106, -107, 92, 127, 72, -108, 81, -60, 24, -51, -89, 38, 89, 86, 114, 120, 72, -108, -101, -119, 49, -102, 79, 77, -78, -84, -28, 70, -121, -108, 25, 101, -103, 24, -93, -7, -52, -84, 66, 79, -51, 69, -121, -108, -23, -9, 70, -69, -40, -61, 114, -12, -112, -69, 98, 71, -32, -36, 121, 67, -29, -36, 41, -119, -76, 114, 68, -103, -20, 27, 46, -100, 108, -47, 72, -105, 114, 97, 50, -4, -112, -109, 41, -85, -123, -67, -80, 87, -103, 85, -10, -108, -77, 90, 40, -107, 10, 51, -29, -90, -2, 89, -72, -92, 64, -80, 99, 117, 28, 12, 11, -60, -63, -80, 64, 28, 12, 11, -60, -63, -80, 64, 28, 12, 11, -60, -63, -80, 64, 28, 12, 11, -60, -63, -80, 64, 28, 12, 11, -60, -63, -80, 64, 28, 12, 11, -60, -63, 88, -126, 100, -127, -113, 49, 106, -72, -4, 85, 33, 53, -89, -126, 118, 51, 126, 23, 120, -13, -39, -60, 101, 46, -15, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.bb3 = new byte[] { -119, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 75, 0, 0, 0, 45, 8, 6, 0, 0, 0, -26, -29, -106, -83, 0, 0, 2, -20, 73, 68, 65, 84, 120, 94, -19, -111, 93, 110, 27, 49, 12, -124, 115, -76, -34, -63, -89, 110, 47, -28, -57, 6, -38, 66, 11, -27, 11, 103, 68, 106, 87, -115, 31, 60, 0, 17, -101, -13, 103, 49, 31, 31, 9, 60, -97, -49, -65, -113, -57, -29, -37, -76, 61, -75, -81, -116, -19, -17, 80, 5, 119, 21, 53, 127, 31, 114, 119, 98, -9, 59, 14, -20, 44, 97, -10, -107, -84, 25, -40, -59, -71, -91, 123, 87, -119, -54, 93, -51, -101, 65, -11, -35, -38, -69, -85, 68, -27, -82, -26, -51, -96, -6, 110, -19, -35, 85, -94, 114, 87, -13, 58, -102, -65, 15, -9, -20, -70, -77, -9, -64, -82, 18, -107, -53, 60, 126, 119, 96, -26, -24, 37, -57, -87, -12, 72, -20, 42, 81, -71, -47, 3, 51, 29, -77, 60, -59, 83, 119, 9, -69, 74, 84, -82, 122, -36, -84, -121, 122, -6, 20, 79, -35, 37, -20, 42, 81, -71, -22, 113, -77, 30, -22, -23, 83, 60, 117, -105, 80, 45, 105, -33, -71, -117, -96, 114, -43, -29, 102, -103, -44, -45, -89, 120, -22, -58, 60, -7, 22, 69, 86, 74, 70, 45, 115, 8, -107, -85, 30, 119, 119, 30, 71, -67, -125, -100, 37, -55, 113, -36, -113, 113, 15, -116, -12, 46, -49, 101, 53, 80, 79, -97, -30, -77, -70, -125, -73, -92, 49, 103, 116, -18, -127, -111, -34, -27, -71, -84, 6, -22, -23, 83, 124, 86, -9, 62, 86, 65, -9, 95, -113, -43, 62, -13, 59, -11, 46, 111, -12, 70, -96, -98, 62, -59, 103, 117, 7, 111, 73, 99, -50, -24, 34, 46, -38, -47, -45, -121, -5, 127, 103, -119, 65, 61, 125, -118, -49, -22, 14, -34, -110, -58, -100, -47, 69, -113, 118, 123, 55, -17, 99, 5, 121, -47, -16, 80, -4, -34, 119, -12, -115, 94, -59, 103, 117, 7, 111, 73, 99, -50, -24, -44, 81, -44, 62, 26, 30, -90, -5, -44, -98, -45, -69, 20, -49, 30, -91, 59, 120, 75, 26, 115, 70, -89, 126, -92, -38, -113, 92, 31, 119, -112, -111, 39, 87, 29, -9, -114, -109, -73, -92, 49, 103, 116, -3, -63, -39, -3, -104, 23, -127, -98, -9, -79, 22, -113, 21, -15, -107, 113, -17, 56, 121, 75, 26, 115, 70, -89, -114, -94, -10, 99, -34, 120, -128, -15, -77, -46, -74, -49, -65, -2, -4, -106, -71, -77, 113, -17, 56, 121, 75, 26, 115, 70, -89, -114, -94, -10, 99, -34, -104, -87, 58, -72, 111, 127, 87, 15, -58, 44, -50, -63, 91, -46, -104, 51, -70, -74, -85, -20, 93, 94, -28, 81, -69, -18, -25, -80, 75, -7, -56, -99, -68, 35, -77, 37, 74, 87, -35, 119, 46, -6, -47, -111, 71, -19, -102, -97, -96, -114, 51, 123, 71, 42, 100, 117, -44, -93, 59, 23, -19, -99, 47, -14, -88, -35, 112, -93, 19, -44, 101, -25, 75, 94, 84, 120, 117, -58, -126, 40, -37, 117, -66, -46, -79, 84, -42, 82, 88, 52, 44, -88, -26, -66, -54, -79, 84, -50, -119, 106, 96, 15, 29, -121, -103, 13, -107, -36, -97, 58, 86, -26, 29, -33, 48, 11, -27, 100, -125, -77, -71, 63, 121, 44, 122, 82, -32, -107, 25, -68, 90, 50, -53, 26, -13, -88, -115, 126, -117, -38, -79, -73, -127, 58, -114, -14, -107, 112, 119, -55, -20, -97, -16, 62, 86, 0, -107, 59, -26, 41, -115, 26, -9, 91, 102, 89, -50, -101, -58, -82, 18, -107, -53, 60, -91, -29, -48, 71, -52, 114, 102, -2, 20, 118, -107, -88, -36, 40, -49, 105, -5, -48, 67, -88, 12, -41, 91, -58, -82, 18, -107, -85, -14, -6, 81, 50, -38, 8, -12, 114, 42, 89, 18, -69, 74, 84, -82, -53, -93, -57, 105, 9, 122, 57, -107, 44, -119, 93, 37, 42, -41, -27, -47, -29, -76, 4, -67, -100, 74, -106, -60, -82, 18, -107, -21, -14, -24, 113, 90, -126, 94, 78, 37, 75, 98, 87, -119, -54, 117, 121, -12, 56, 45, 65, 47, -89, -110, 37, -79, -85, 68, -27, -70, 60, 122, -100, -106, -96, -105, 83, -55, -110, -88, -108, 84, 10, 85, -82, -53, -96, -57, 105, 9, 122, 57, -85, -17, -8, -126, 108, 73, -41, 101, -117, 84, -82, -13, -45, -29, -76, 4, -67, -100, -52, 59, 62, 1, -100, 26, 41, 109, 30, 59, 23, 120, 0, 0, 0, 0, 73, 69, 78, 68, -82, 66, 96, -126 };
        this.x = n;
        this.y = y;
        this.rng = Math.random();
        if (Math.random() >= 0.92) {
            this.bird = true;
            this.width = 46;
            this.height = 34;
        }
        else {
            final int n2 = (int)(Math.random() * 6.0 + 1.0);
            try {
                this.l1 = ImageIO.read(new ByteArrayInputStream(this.ll1));
                this.l2 = ImageIO.read(new ByteArrayInputStream(this.ll2));
                this.l3 = ImageIO.read(new ByteArrayInputStream(this.ll3));
                this.b1 = ImageIO.read(new ByteArrayInputStream(this.bb1));
                this.b2 = ImageIO.read(new ByteArrayInputStream(this.bb2));
                this.b3 = ImageIO.read(new ByteArrayInputStream(this.bb3));
                switch (n2) {
                    case 0: {
                        this.image = this.l1;
                        break;
                    }
                    case 1: {
                        this.image = this.l2;
                        break;
                    }
                    case 2: {
                        this.image = this.l3;
                        break;
                    }
                    case 3: {
                        this.image = this.b1;
                        break;
                    }
                    case 4: {
                        this.image = this.b2;
                        break;
                    }
                    case 5: {
                        this.image = this.b3;
                        break;
                    }
                }
                this.width = this.image.getWidth();
                this.height = this.image.getHeight();
            }
            catch (Exception ex) {}
        }
        this.hitbox = new Rectangle(n + this.offset, y + this.offset, this.width - this.offset, this.height - this.offset);
    }
    
    @Override
    public String toString() {
        return invokedynamic(makeConcatWithConstants:(DIII)Ljava/lang/String;, this.x, this.y, this.width, this.height);
    }
    
    public static BufferedImage removeBG(final BufferedImage bufferedImage) {
        final BufferedImage bufferedImage2 = new BufferedImage(bufferedImage.getWidth(), bufferedImage.getHeight(), 2);
        Color obj = new Color(bufferedImage.getRGB(0, 0));
        if (bufferedImage.getWidth() == 59) {
            obj = new Color(bufferedImage.getRGB(6, 0));
        }
        final Color obj2 = new Color(bufferedImage.getRGB(4, 0));
        for (int i = 0; i < bufferedImage.getWidth(); ++i) {
            for (int j = 0; j < bufferedImage.getHeight(); ++j) {
                final Color color = new Color(bufferedImage.getRGB(i, j));
                if (!color.equals(obj) && !color.equals(obj2)) {
                    bufferedImage2.setRGB(i, j, color.getRGB());
                }
            }
        }
        return bufferedImage2;
    }
}
