from Crypto.Util.number import *
import binascii
import sympy
from pwn import *

e = 30
n1 = 0x4a24a66ce98827badc13ede361068d531c10345f21e84ba6c33fe1edc7daf657f53687dc2647bfa69e177b70e398efff2ea90fe502e84254616db9e8df6ecdfecc65211a12930fd0a9c75829769d83842767e1ca75ace4cbb808bcff02439e0aa0eff829efedbe5b7168ea712601a013a101278ea3c06cff5cb129c1cf98e9b4774124d577e404e693408319f0bf2b245b45999f99be3d0f153e560694ae65b130dfe35ca626d23d979139bd9c0ca2ed7e5541fda1fa58d9b9fe060b2a0e4a8c7d14febcc99d7c17f28ac8542947ad6d2681148382ca4a92d0d9546734044d6b9992f8a8d26224666641bf6ec01f8458a0d69db836c5fb40d3d2ff596d0843af
c1 = 0x28a3a2f558ab333ac35f385fa3d2dac60b9e5d6c2552090ebb0354afc0e62e14cda5dee6087ea6946bb9277cd00c91671e540ca5440a0fd39da724c4782006514a4fbad5f4826594da4dfe455e877bb64e668888fb7b433e68b10123ba554348aae43a33470f7243c3214f772c7ce2c49f0ca0e6dacca0e6b3c110b71736b06ac3bd80fb390c67b70108258f5cf6794ac53556fb96ea8fe9774418876b15f73adb16018c73993aa96762ebb41faaf3111fb911e908437916531e359df78db4ffe980d9de4335034f6d47b4371c7a94476a68721f48aa3c4cf18faad37dd8a31ccef1af304fa9a334d789040f1238921de5b13322b0a781385ae331cce1bff417
n2 = 0x7e27d8ca9a47f0d7c0ff2347066506e3b14d83381bec8dbba2e20ecaad4ad9719c275626e40e7a2cbf2a9733545ec9f010c013cd694bc54c565c227f494eaef30079fcec32f3e981b532927b112386616fb5da113110ca94facae6faa430a97006415d39a694c68b04463adbbb29883c5b236c110351d43f9eff1ec5d16d64150f14635e4f08009b53bd0ed1abfce8b1ca838453ceb0fb7e68d7626e7f171bee67c3edaa89d92836e237ce52fa3c47f02bea0b42cb6415640533a27447216d3d4b12a4f25dfda0e02295fd25a36335935f0e033a4ce4294169b275e7f3d82122bbc7d9258c3d60067ad725169a8d7599a75188e3ddf4d0bdcf9d21f72a9b8caf
c2 = 0xf58ca020b079aba0e1554d1b00271e7cb087a6035535c988d56249602d50a981189b10be52c6f62e13a143a7695a53a8226da3fa64947a6227ab6b55b8d9fec43cb41613328fc3c18a31c15f718a13d910608a278c9e9e8a2eedb1809972b5acfd0379c7b6a16d86b0f8ed46eac91183e6d89fc6c5f3ee3094f82d3aca31ec5da0400a9b6e161160359ce2c5d3ec2c7908e17e2acd34f308762e3d91a9bb812dc828bd31f48301a043c0da5c836c9de380c373b9b17b49f772488884e0a9d38ee54bfaf7e27da81cbc6b390e6f0cee7fc84033d9946ee37d8b899479b5daf3186314d020e7acdfa129885ef173b241e771b37fbc91994db91518da7875f3a48
n3 = 0x69f02e91903c691d27b1bec2790e097f8ccc9748e5f4dfcdf153a1ba379797e80b839d2a19b0e0c54d9c11560ed5aa9cd7387822ddc78227fc98cc9dadcb9d9c48fceddfb397860c812525b2e2514dc373e6d00d99ca68d63e297dc4a43fc7192b9482c6f7959c60219c62bbbc4c63d9f051257522408bc17552a00763a7c878e812384db41dc76c797ed25115d1208f6b96dcd04f33a57f0a1ec7f8d0012435541da90a75b867e98060624310ef1dae148f3401e50bd3726658d112de2072dd7c479fddef8bac9dd47d48cb75fb17871b1ace2ab9d07b44efe50d347614340e734a88a8013a7451293a3994eba53913d8393fc80deb5d7bf6502f086bf63d83
c3 = 0xf4210e60929333929a805141d76244925d000798d5b5421a2733640e1e76ce9c9d2984b7d7ff2c09d06e8effd42a95f19c8f6d7c6b94a0150fac1a91770165d4c90e227bc3bb09812c33c7b494deed5a0624e79599fcf0f1c1d3d7f78c3fe7927eb0abaa6007473179b46879d827e3ac8af36576b0853048a972d738debe913151c442f0b58c38c3abdeb9da32708b12d9c23017066cb145509e12ac194a93c9c8e315fa2fd3fa76d0951846b16e33fcad68c596d0a7737d9f5dc033fef4f0a1835ae5be07e072333b15b506f314681e1e42ac8245cc59dba6349de3ee8d59c7d72a77dcc2380df98b701e740ff795977f7f261da860ce97a205511e8e416f0


def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod / n_i
        # print ("n_i", n_i)
        # print ("a_i", a_i)
        # print ("p", p)
        #sum += a_i * mul_inv(p, n_i) * p
        sum += a_i * inverse(p, n_i) * p
        # print ("sum", sum)
    return sum % prod 

x = chinese_remainder([n1, n2, n3], [c1, c2, c3])
 
# 1. Simple attack
# m = sympy.root(x, e)
 
m = pow(sympy.E,  sympy.ln(x) / e )
print(m)
 
 
# print ("Trey's one sum", c1 * n2 * n3 * inverse( n2*n3, n1 ))
# # THIS IS THE CHINESE REMAINDER THEOREM IN ONE EQUATION ... FROM TREY
# m = ( c1 * n2 * n3 * inverse( n2*n3, n1 ) + c2 * n1 * n3 * inverse( n1*n3, n2 ) + c3 * n1 * n2 * inverse( n1*n2, n3 ) ) % ( n1 * n2 * n3 )
# print m == x
 
# print pow(10, sympy.ln(pow(m,e)))
 
 
print ("")
 
# print 
 
try:
    print (hex(int(m))[2:-1].decode('hex', "ignore"))
except:
    print ("Supposedly odd length string...")
    print (str("0"+ hex( int(m))[2:-1]).decode('hex'))